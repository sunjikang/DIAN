package com.xing.manage.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.xing.manage.bean.device.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mmid = new Property(0, Long.class, "mmid", true, "_id");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property StartTime = new Property(2, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, Long.class, "endTime", false, "END_TIME");
        public final static Property Checker = new Property(4, String.class, "checker", false, "CHECKER");
        public final static Property PollingType = new Property(5, String.class, "pollingType", false, "POLLING_TYPE");
        public final static Property ObservedValue = new Property(6, String.class, "observedValue", false, "OBSERVED_VALUE");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property IsNormal = new Property(8, Boolean.class, "isNormal", false, "IS_NORMAL");
        public final static Property IsUploaded = new Property(9, Boolean.class, "isUploaded", false, "IS_UPLOADED");
        public final static Property LineId = new Property(10, Long.class, "lineId", false, "LINE_ID");
        public final static Property AreaId = new Property(11, Long.class, "areaId", false, "AREA_ID");
        public final static Property FacilityId = new Property(12, Long.class, "facilityId", false, "FACILITY_ID");
        public final static Property InspectionId = new Property(13, Long.class, "inspectionId", false, "INSPECTION_ID");
        public final static Property LineServerId = new Property(14, Long.class, "lineServerId", false, "LINE_SERVER_ID");
        public final static Property AreaServerId = new Property(15, Long.class, "areaServerId", false, "AREA_SERVER_ID");
        public final static Property FacilityServerId = new Property(16, Long.class, "facilityServerId", false, "FACILITY_SERVER_ID");
        public final static Property InspectionServerId = new Property(17, Long.class, "inspectionServerId", false, "INSPECTION_SERVER_ID");
        public final static Property LineCode = new Property(18, String.class, "lineCode", false, "LINE_CODE");
        public final static Property LineName = new Property(19, String.class, "lineName", false, "LINE_NAME");
        public final static Property AreaName = new Property(20, String.class, "areaName", false, "AREA_NAME");
        public final static Property FacilityName = new Property(21, String.class, "facilityName", false, "FACILITY_NAME");
        public final static Property InspectionName = new Property(22, String.class, "inspectionName", false, "INSPECTION_NAME");
    }

    private DaoSession daoSession;

    private Query<Record> area_RecordListQuery;
    private Query<Record> facility_RecordListQuery;
    private Query<Record> inspection_RecordListQuery;
    private Query<Record> line_RecordListQuery;

    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: mmid
                "\"ID\" INTEGER," + // 1: id
                "\"START_TIME\" INTEGER," + // 2: startTime
                "\"END_TIME\" INTEGER," + // 3: endTime
                "\"CHECKER\" TEXT," + // 4: checker
                "\"POLLING_TYPE\" TEXT," + // 5: pollingType
                "\"OBSERVED_VALUE\" TEXT," + // 6: observedValue
                "\"REMARK\" TEXT," + // 7: remark
                "\"IS_NORMAL\" INTEGER," + // 8: isNormal
                "\"IS_UPLOADED\" INTEGER," + // 9: isUploaded
                "\"LINE_ID\" INTEGER," + // 10: lineId
                "\"AREA_ID\" INTEGER," + // 11: areaId
                "\"FACILITY_ID\" INTEGER," + // 12: facilityId
                "\"INSPECTION_ID\" INTEGER," + // 13: inspectionId
                "\"LINE_SERVER_ID\" INTEGER," + // 14: lineServerId
                "\"AREA_SERVER_ID\" INTEGER," + // 15: areaServerId
                "\"FACILITY_SERVER_ID\" INTEGER," + // 16: facilityServerId
                "\"INSPECTION_SERVER_ID\" INTEGER," + // 17: inspectionServerId
                "\"LINE_CODE\" TEXT," + // 18: lineCode
                "\"LINE_NAME\" TEXT," + // 19: lineName
                "\"AREA_NAME\" TEXT," + // 20: areaName
                "\"FACILITY_NAME\" TEXT," + // 21: facilityName
                "\"INSPECTION_NAME\" TEXT);"); // 22: inspectionName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long mmid = entity.getMmid();
        if (mmid != null) {
            stmt.bindLong(1, mmid);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(3, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(4, endTime);
        }
 
        String checker = entity.getChecker();
        if (checker != null) {
            stmt.bindString(5, checker);
        }
 
        String pollingType = entity.getPollingType();
        if (pollingType != null) {
            stmt.bindString(6, pollingType);
        }
 
        String observedValue = entity.getObservedValue();
        if (observedValue != null) {
            stmt.bindString(7, observedValue);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        Boolean isNormal = entity.getIsNormal();
        if (isNormal != null) {
            stmt.bindLong(9, isNormal ? 1L: 0L);
        }
 
        Boolean isUploaded = entity.getIsUploaded();
        if (isUploaded != null) {
            stmt.bindLong(10, isUploaded ? 1L: 0L);
        }
 
        Long lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindLong(11, lineId);
        }
 
        Long areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindLong(12, areaId);
        }
 
        Long facilityId = entity.getFacilityId();
        if (facilityId != null) {
            stmt.bindLong(13, facilityId);
        }
 
        Long inspectionId = entity.getInspectionId();
        if (inspectionId != null) {
            stmt.bindLong(14, inspectionId);
        }
 
        Long lineServerId = entity.getLineServerId();
        if (lineServerId != null) {
            stmt.bindLong(15, lineServerId);
        }
 
        Long areaServerId = entity.getAreaServerId();
        if (areaServerId != null) {
            stmt.bindLong(16, areaServerId);
        }
 
        Long facilityServerId = entity.getFacilityServerId();
        if (facilityServerId != null) {
            stmt.bindLong(17, facilityServerId);
        }
 
        Long inspectionServerId = entity.getInspectionServerId();
        if (inspectionServerId != null) {
            stmt.bindLong(18, inspectionServerId);
        }
 
        String lineCode = entity.getLineCode();
        if (lineCode != null) {
            stmt.bindString(19, lineCode);
        }
 
        String lineName = entity.getLineName();
        if (lineName != null) {
            stmt.bindString(20, lineName);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(21, areaName);
        }
 
        String facilityName = entity.getFacilityName();
        if (facilityName != null) {
            stmt.bindString(22, facilityName);
        }
 
        String inspectionName = entity.getInspectionName();
        if (inspectionName != null) {
            stmt.bindString(23, inspectionName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long mmid = entity.getMmid();
        if (mmid != null) {
            stmt.bindLong(1, mmid);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(3, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(4, endTime);
        }
 
        String checker = entity.getChecker();
        if (checker != null) {
            stmt.bindString(5, checker);
        }
 
        String pollingType = entity.getPollingType();
        if (pollingType != null) {
            stmt.bindString(6, pollingType);
        }
 
        String observedValue = entity.getObservedValue();
        if (observedValue != null) {
            stmt.bindString(7, observedValue);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        Boolean isNormal = entity.getIsNormal();
        if (isNormal != null) {
            stmt.bindLong(9, isNormal ? 1L: 0L);
        }
 
        Boolean isUploaded = entity.getIsUploaded();
        if (isUploaded != null) {
            stmt.bindLong(10, isUploaded ? 1L: 0L);
        }
 
        Long lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindLong(11, lineId);
        }
 
        Long areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindLong(12, areaId);
        }
 
        Long facilityId = entity.getFacilityId();
        if (facilityId != null) {
            stmt.bindLong(13, facilityId);
        }
 
        Long inspectionId = entity.getInspectionId();
        if (inspectionId != null) {
            stmt.bindLong(14, inspectionId);
        }
 
        Long lineServerId = entity.getLineServerId();
        if (lineServerId != null) {
            stmt.bindLong(15, lineServerId);
        }
 
        Long areaServerId = entity.getAreaServerId();
        if (areaServerId != null) {
            stmt.bindLong(16, areaServerId);
        }
 
        Long facilityServerId = entity.getFacilityServerId();
        if (facilityServerId != null) {
            stmt.bindLong(17, facilityServerId);
        }
 
        Long inspectionServerId = entity.getInspectionServerId();
        if (inspectionServerId != null) {
            stmt.bindLong(18, inspectionServerId);
        }
 
        String lineCode = entity.getLineCode();
        if (lineCode != null) {
            stmt.bindString(19, lineCode);
        }
 
        String lineName = entity.getLineName();
        if (lineName != null) {
            stmt.bindString(20, lineName);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(21, areaName);
        }
 
        String facilityName = entity.getFacilityName();
        if (facilityName != null) {
            stmt.bindString(22, facilityName);
        }
 
        String inspectionName = entity.getInspectionName();
        if (inspectionName != null) {
            stmt.bindString(23, inspectionName);
        }
    }

    @Override
    protected final void attachEntity(Record entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mmid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // startTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // endTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // checker
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pollingType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // observedValue
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isNormal
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isUploaded
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // lineId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // areaId
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // facilityId
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // inspectionId
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // lineServerId
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // areaServerId
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // facilityServerId
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // inspectionServerId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // lineCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // lineName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // areaName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // facilityName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // inspectionName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setMmid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setChecker(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPollingType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setObservedValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsNormal(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsUploaded(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setLineId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setAreaId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setFacilityId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setInspectionId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setLineServerId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setAreaServerId(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setFacilityServerId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setInspectionServerId(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setLineCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLineName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAreaName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFacilityName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setInspectionName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setMmid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Record entity) {
        if(entity != null) {
            return entity.getMmid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Record entity) {
        return entity.getMmid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "recordList" to-many relationship of Area. */
    public List<Record> _queryArea_RecordList(Long areaId) {
        synchronized (this) {
            if (area_RecordListQuery == null) {
                QueryBuilder<Record> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AreaId.eq(null));
                area_RecordListQuery = queryBuilder.build();
            }
        }
        Query<Record> query = area_RecordListQuery.forCurrentThread();
        query.setParameter(0, areaId);
        return query.list();
    }

    /** Internal query to resolve the "recordList" to-many relationship of Facility. */
    public List<Record> _queryFacility_RecordList(Long facilityId) {
        synchronized (this) {
            if (facility_RecordListQuery == null) {
                QueryBuilder<Record> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FacilityId.eq(null));
                facility_RecordListQuery = queryBuilder.build();
            }
        }
        Query<Record> query = facility_RecordListQuery.forCurrentThread();
        query.setParameter(0, facilityId);
        return query.list();
    }

    /** Internal query to resolve the "recordList" to-many relationship of Inspection. */
    public List<Record> _queryInspection_RecordList(Long inspectionId) {
        synchronized (this) {
            if (inspection_RecordListQuery == null) {
                QueryBuilder<Record> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.InspectionId.eq(null));
                inspection_RecordListQuery = queryBuilder.build();
            }
        }
        Query<Record> query = inspection_RecordListQuery.forCurrentThread();
        query.setParameter(0, inspectionId);
        return query.list();
    }

    /** Internal query to resolve the "recordList" to-many relationship of Line. */
    public List<Record> _queryLine_RecordList(Long lineId) {
        synchronized (this) {
            if (line_RecordListQuery == null) {
                QueryBuilder<Record> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LineId.eq(null));
                line_RecordListQuery = queryBuilder.build();
            }
        }
        Query<Record> query = line_RecordListQuery.forCurrentThread();
        query.setParameter(0, lineId);
        return query.list();
    }

}
