package com.xing.module.quality.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.xing.module.quality.bean.QCRecordCode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QCRecordCode".
*/
public class QCRecordCodeDao extends AbstractDao<QCRecordCode, Long> {

    public static final String TABLENAME = "QCRecordCode";

    /**
     * Properties of entity QCRecordCode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property QcrId = new Property(1, Long.class, "qcrId", false, "QCR_ID");
        public final static Property ReasonType = new Property(2, String.class, "reasonType", false, "REASON_TYPE");
        public final static Property ReasonCode = new Property(3, String.class, "reasonCode", false, "REASON_CODE");
        public final static Property Qty = new Property(4, Integer.class, "qty", false, "QTY");
    }

    private Query<QCRecordCode> qCRecord_QcRecordCodeListQuery;

    public QCRecordCodeDao(DaoConfig config) {
        super(config);
    }
    
    public QCRecordCodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QCRecordCode\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"QCR_ID\" INTEGER NOT NULL ," + // 1: qcrId
                "\"REASON_TYPE\" TEXT," + // 2: reasonType
                "\"REASON_CODE\" TEXT," + // 3: reasonCode
                "\"QTY\" INTEGER);"); // 4: qty
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QCRecordCode\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QCRecordCode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getQcrId());
 
        String reasonType = entity.getReasonType();
        if (reasonType != null) {
            stmt.bindString(3, reasonType);
        }
 
        String reasonCode = entity.getReasonCode();
        if (reasonCode != null) {
            stmt.bindString(4, reasonCode);
        }
 
        Integer qty = entity.getQty();
        if (qty != null) {
            stmt.bindLong(5, qty);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QCRecordCode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getQcrId());
 
        String reasonType = entity.getReasonType();
        if (reasonType != null) {
            stmt.bindString(3, reasonType);
        }
 
        String reasonCode = entity.getReasonCode();
        if (reasonCode != null) {
            stmt.bindString(4, reasonCode);
        }
 
        Integer qty = entity.getQty();
        if (qty != null) {
            stmt.bindLong(5, qty);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QCRecordCode readEntity(Cursor cursor, int offset) {
        QCRecordCode entity = new QCRecordCode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // qcrId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // reasonType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // reasonCode
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // qty
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QCRecordCode entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQcrId(cursor.getLong(offset + 1));
        entity.setReasonType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReasonCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQty(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QCRecordCode entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QCRecordCode entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QCRecordCode entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "qcRecordCodeList" to-many relationship of QCRecord. */
    public List<QCRecordCode> _queryQCRecord_QcRecordCodeList(Long qcrId) {
        synchronized (this) {
            if (qCRecord_QcRecordCodeListQuery == null) {
                QueryBuilder<QCRecordCode> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.QcrId.eq(null));
                qCRecord_QcRecordCodeListQuery = queryBuilder.build();
            }
        }
        Query<QCRecordCode> query = qCRecord_QcRecordCodeListQuery.forCurrentThread();
        query.setParameter(0, qcrId);
        return query.list();
    }

}
