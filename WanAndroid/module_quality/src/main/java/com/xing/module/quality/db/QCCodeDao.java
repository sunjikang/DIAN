package com.xing.module.quality.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xing.module.quality.bean.QCCode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QCCode".
*/
public class QCCodeDao extends AbstractDao<QCCode, Long> {

    public static final String TABLENAME = "QCCode";

    /**
     * Properties of entity QCCode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ParentID = new Property(1, Long.class, "parentID", false, "PARENT_ID");
        public final static Property ReasonName = new Property(2, String.class, "reasonName", false, "REASON_NAME");
        public final static Property EnName = new Property(3, String.class, "enName", false, "EN_NAME");
        public final static Property ReasonCode = new Property(4, Integer.class, "ReasonCode", false, "REASON_CODE");
    }


    public QCCodeDao(DaoConfig config) {
        super(config);
    }
    
    public QCCodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QCCode\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PARENT_ID\" INTEGER," + // 1: parentID
                "\"REASON_NAME\" TEXT," + // 2: reasonName
                "\"EN_NAME\" TEXT," + // 3: enName
                "\"REASON_CODE\" INTEGER);"); // 4: ReasonCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QCCode\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QCCode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long parentID = entity.getParentID();
        if (parentID != null) {
            stmt.bindLong(2, parentID);
        }
 
        String reasonName = entity.getReasonName();
        if (reasonName != null) {
            stmt.bindString(3, reasonName);
        }
 
        String enName = entity.getEnName();
        if (enName != null) {
            stmt.bindString(4, enName);
        }
 
        Integer ReasonCode = entity.getReasonCode();
        if (ReasonCode != null) {
            stmt.bindLong(5, ReasonCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QCCode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long parentID = entity.getParentID();
        if (parentID != null) {
            stmt.bindLong(2, parentID);
        }
 
        String reasonName = entity.getReasonName();
        if (reasonName != null) {
            stmt.bindString(3, reasonName);
        }
 
        String enName = entity.getEnName();
        if (enName != null) {
            stmt.bindString(4, enName);
        }
 
        Integer ReasonCode = entity.getReasonCode();
        if (ReasonCode != null) {
            stmt.bindLong(5, ReasonCode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QCCode readEntity(Cursor cursor, int offset) {
        QCCode entity = new QCCode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // parentID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // reasonName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // enName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // ReasonCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QCCode entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParentID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setReasonName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEnName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReasonCode(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QCCode entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QCCode entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QCCode entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
